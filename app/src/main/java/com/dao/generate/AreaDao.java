package com.dao.generate;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dao.generate.Area;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA".
*/
public class AreaDao extends AbstractDao<Area, Long> {

    public static final String TABLENAME = "AREA";

    /**
     * Properties of entity Area.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AreaId = new Property(1, int.class, "areaId", false, "AREA_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ParentId = new Property(3, int.class, "parentId", false, "PARENT_ID");
        public final static Property CityId = new Property(4, int.class, "cityId", false, "CITY_ID");
    };


    public AreaDao(DaoConfig config) {
        super(config);
    }
    
    public AreaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"AREA_ID\" INTEGER NOT NULL ," + // 1: areaId
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"PARENT_ID\" INTEGER NOT NULL ," + // 3: parentId
                "\"CITY_ID\" INTEGER NOT NULL );"); // 4: cityId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Area entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAreaId());
        stmt.bindString(3, entity.getName());
        stmt.bindLong(4, entity.getParentId());
        stmt.bindLong(5, entity.getCityId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Area readEntity(Cursor cursor, int offset) {
        Area entity = new Area( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // areaId
            cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // parentId
            cursor.getInt(offset + 4) // cityId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Area entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAreaId(cursor.getInt(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setParentId(cursor.getInt(offset + 3));
        entity.setCityId(cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Area entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Area entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
